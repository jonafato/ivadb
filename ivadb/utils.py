from flask.ext.restful import fields
from sqlalchemy import inspect, types


class SubclassDict(dict):
    '''A dict where keys are classes or subclasses.

    If a key is searched for and not found, do a secondary search using
    `issubclass`. Inspired by wtforms_alchemy.utils.ClassMap.
    '''
    def __contains__(self, key):
        if dict.__contains__(self, key):
            return True
        return any(issubclass(key, cls) for cls in self)

    def __getitem__(self, key):
        try:
            return dict.__getitem__(self, key)
        except KeyError:
            for cls in self:
                if issubclass(key, cls):
                    self[key] = self[cls]
                    return self[key]
            raise


field_map = SubclassDict({
    types.Boolean: fields.Boolean,
    types.Date: fields.DateTime,
    types.DateTime: fields.DateTime,
    types.Integer: fields.Integer,
    types.Float: fields.Float,
    types.String: fields.String,
})


def fields_from_model(Model):
    """Returns an autogenerated ``dict`` to be passed to ``marshal_with``.

    :param Model: a SQLAlchemy model class.
    """
    marshal_fields = {}
    columns = inspect(Model).column_attrs.keys()
    for column in columns:
        marshal_fields[column] = field_map[type(getattr(Model, column).type)]
    return marshal_fields
